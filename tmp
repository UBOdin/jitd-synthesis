FN: PUSHDOWN is 
LAMBDA( target_cog:cog ) ->
  let __match_target := (target_cog) as _ in
    if
      (__match_target) ISA <CONCAT> &&
        ((__match_target)[ 'LHS' ]) ISA <TREE> &&
          (((__match_target)[ 'LHS' ])[ 'SEP' ]) ISA _ &&
          (((__match_target)[ 'LHS' ])[ 'LHS' ]) ISA _ &&
          (((__match_target)[ 'LHS' ])[ 'RHS' ]) ISA _
        &&
        ((__match_target)[ 'RHS' ]) ISA <ARRAY> &&
          (((__match_target)[ 'RHS' ])[ 'DATA' ]) ISA _
      let data :=
        (((((__match_target) as <CONCAT>)[ 'RHS' ]) as <ARRAY>)[ 'DATA' ]) as _
        in
        let bt_rhs :=
          (((((__match_target) as <CONCAT>)[ 'LHS' ]) as <TREE>)[ 'RHS' ]) as _
          in
          let bt_lhs :=
            (((((__match_target) as <CONCAT>)[ 'LHS' ]) as <TREE>)[ 'LHS' ]) as _
            in
            let sep :=
              (((((__match_target) as <CONCAT>)[ 'LHS' ]) as <TREE>)[ 'SEP' ]) as _
              in
              let cracked := SPLIT( sep, data ) in
                rewrite target_cog as
                  TREE(
                    sep, CONCAT( bt_lhs, ARRAY( (cracked)[ 'LOW' ] ) ), 
                    CONCAT( bt_rhs, ARRAY( (cracked)[ 'HIGH' ] ) ) )
      else { }
FN: CRACK_OR_SORT is 
LAMBDA( target_cog:cog, threshold:int ) ->
  let __match_target := (target_cog) as _ in
    if (__match_target) ISA <ARRAY> && ((__match_target)[ 'DATA' ]) ISA _
      let data := (((__match_target) as <ARRAY>)[ 'DATA' ]) as _ in
        if SIZEOF( data ) > threshold
          let cracked := SPLIT( (data)[ 0 ], data ) in
            rewrite target_cog as
              TREE( ARRAY( (cracked)[ 'LOW' ] ), ARRAY( (cracked)[ 'HIGH' ] )
                )
          else rewrite target_cog as SORTED( SORT( data ) )
      else { }
ON BEFORE_ITERATOR(target)
{
  if
    (target) ISA <CONCAT> && ((target)[ 'LHS' ]) ISA <TREE> &&
      ((target)[ 'RHS' ]) ISA <ARRAY>
    let cracked :=
      SPLIT(
        ((((target) as <CONCAT>)[ 'LHS' ]) as <TREE>)[ 'SEP' ], ((((target) as <CONCAT>)[
                                                                    'RHS' ]) as <ARRAY>)[
                                                                  'DATA' ]
        )
      in
      rewrite target_cog as
        TREE(
          ((((target) as <CONCAT>)[ 'LHS' ]) as <TREE>)[ 'SEP' ], CONCAT(
                                                                    ((((target) as <CONCAT>)[
                                                                    'LHS' ]) as <TREE>)[
                                                                    'LHS' ], 
                                                                    ARRAY(
                                                                    (cracked)[
                                                                    'LOW' ] )
                                                                    ), 
          CONCAT(
            ((((target) as <CONCAT>)[ 'LHS' ]) as <TREE>)[ 'RHS' ], ARRAY(
                                                                    (cracked)[
                                                                    'HIGH' ]
                                                                    )
            )
          )
    else { };  if (target) ISA <ARRAY>
                 if SIZEOF( ((target) as <ARRAY>)[ 'DATA' ] ) > 3
                   let cracked :=
                     SPLIT(
                       (((target) as <ARRAY>)[ 'DATA' ])[ 0 ], ((target) as <ARRAY>)[
                                                                 'DATA' ]
                       )
                     in
                     rewrite target_cog as
                       TREE(
                         ARRAY( (cracked)[ 'LOW' ] ), ARRAY(
                                                        (cracked)[ 'HIGH' ] )
                         )
                   else
                   rewrite target_cog as
                     SORTED( SORT( ((target) as <ARRAY>)[ 'DATA' ] ) )
                 else { }
  }
