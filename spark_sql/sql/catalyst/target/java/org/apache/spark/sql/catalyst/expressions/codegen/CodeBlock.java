package org.apache.spark.sql.catalyst.expressions.codegen;
/**
 * A block of java code. Including a sequence of code parts and some inputs to this block.
 * The actual java code is generated by embedding the inputs into the code parts. Here we keep
 * inputs of <code>JavaCode</code> instead of simply folding them as a string of code, because we need to
 * track expressions (<code>ExprValue</code>) in this code block. We need to be able to manipulate the
 * expressions later without changing the behavior of this code block in some applications, e.g.,
 * method splitting.
 */
public  class CodeBlock extends org.apache.spark.sql.catalyst.trees.TreeNode<org.apache.spark.sql.catalyst.expressions.codegen.Block> implements org.apache.spark.sql.catalyst.expressions.codegen.Block, scala.Product, scala.Serializable {
  static public abstract  R apply (T1 v1, T2 v2)  ;
  static public  java.lang.String toString ()  { throw new RuntimeException(); }
  public  scala.Option<java.lang.Object> _marginChar ()  { throw new RuntimeException(); }
  public  scala.collection.Seq<java.lang.String> codeParts ()  { throw new RuntimeException(); }
  public  scala.collection.Seq<org.apache.spark.sql.catalyst.expressions.codegen.JavaCode> blockInputs ()  { throw new RuntimeException(); }
  // not preceding
  public   CodeBlock (scala.collection.Seq<java.lang.String> codeParts, scala.collection.Seq<org.apache.spark.sql.catalyst.expressions.codegen.JavaCode> blockInputs)  { throw new RuntimeException(); }
  public  scala.collection.Seq<org.apache.spark.sql.catalyst.expressions.codegen.Block> children ()  { throw new RuntimeException(); }
  // not preceding
  public  java.lang.String code ()  { throw new RuntimeException(); }
}
