package org.apache.spark.sql.catalyst.parser;
/**
 * This string stream provides the lexer with upper case characters only. This greatly simplifies
 * lexing the stream, while we can maintain the original command.
 * <p>
 * This is based on Hive's org.apache.hadoop.hive.ql.parse.ParseDriver.ANTLRNoCaseStringStream
 * <p>
 * The comment below (taken from the original class) describes the rationale for doing this:
 * <p>
 * This class provides and implementation for a case insensitive token checker for the lexical
 * analysis part of antlr. By converting the token stream into upper case at the time when lexical
 * rules are checked, this class ensures that the lexical rules need to just match the token with
 * upper case letters as opposed to combination of upper case and lower case characters. This is
 * purely used for matching lexical rules. The actual token text is stored in the same way as the
 * user input without actually converting it into an upper case. The token values are generated by
 * the consume() function of the super class ANTLRStringStream. The LA() function is the lookahead
 * function and is purely used for matching lexical rules. This also means that the grammar will
 * only accept capitalized tokens in case it is run from other tools like antlrworks which do not
 * have the UpperCaseCharStream implementation.
 */
  class UpperCaseCharStream implements org.antlr.v4.runtime.CharStream {
  public  int LA (int i)  { throw new RuntimeException(); }
  public   UpperCaseCharStream (org.antlr.v4.runtime.CodePointCharStream wrapped)  { throw new RuntimeException(); }
  public  void consume ()  { throw new RuntimeException(); }
  public  java.lang.String getSourceName ()  { throw new RuntimeException(); }
  public  java.lang.String getText (org.antlr.v4.runtime.misc.Interval interval)  { throw new RuntimeException(); }
  public  int index ()  { throw new RuntimeException(); }
  public  int mark ()  { throw new RuntimeException(); }
  public  void release (int marker)  { throw new RuntimeException(); }
  public  void seek (int where)  { throw new RuntimeException(); }
  public  int size ()  { throw new RuntimeException(); }
}
