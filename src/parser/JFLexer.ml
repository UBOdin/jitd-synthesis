# 1 "src/parser/JFLexer.mll"
 
open JFParser;;

module StrMap = Map.Make(String);;

let init_line lexbuf =
    let pos = lexbuf.Lexing.lex_curr_p in
        lexbuf.Lexing.lex_curr_p <- { pos with
            Lexing.pos_lnum = 1;
            Lexing.pos_bol = 0;
        }

let advance_line lexbuf =
    let pos = lexbuf.Lexing.lex_curr_p in
        lexbuf.Lexing.lex_curr_p <- { pos with
            Lexing.pos_lnum = pos.Lexing.pos_lnum + 1;
            Lexing.pos_bol = 0 (*pos.Lexing.pos_cnum*);
        }


let keywords = List.fold_left 
  (fun map (a,b) -> StrMap.add (String.uppercase a) b map)
  StrMap.empty
  [
    ( "RULE",     RULE );
    ( "POLICY",   POLICY );
    ( "COG",      COG );
    ( "ON",       ON );
    ( "IS",       IS );
    ( "APPLY",    APPLY );
    ( "TO",       TO );
    ( "DONE",     DONE );
    ( "LET",      LET );
    ( "REWRITE",  REWRITE );
    ( "IF",       IF );
    ( "THEN",     THEN );
    ( "ELSE",     ELSE );
    ( "MATCH",    MATCH );
    ( "WITH",     WITH );
    ( "TRUE",     BOOLCONST(true) );
    ( "FALSE",    BOOLCONST(false) );
    ( "IN",       IN );
    ( "AS",       AS );
    ( "NOT",      NOT );
  ];;

# 49 "src/parser/JFLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\219\255\220\255\080\000\223\255\090\000\004\000\227\255\
    \228\255\230\255\025\000\031\000\033\000\035\000\240\255\086\000\
    \088\000\090\000\244\255\028\000\246\255\247\255\248\255\249\255\
    \250\255\251\255\252\255\253\255\254\255\255\255\001\000\231\255\
    \243\255\238\255\242\255\241\255\237\255\235\255\233\255\232\255\
    \225\255\165\000\058\000\252\255\028\000\254\255\029\000\143\000\
    \253\255\145\000\147\000\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\034\000\255\255\031\000\036\000\255\255\
    \255\255\255\255\036\000\021\000\019\000\036\000\255\255\026\000\
    \036\000\016\000\255\255\010\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\033\000\255\255\255\255\002\000\255\255\000\000\255\255\
    \255\255\001\000\001\000\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\000\000\255\255\255\255\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\044\000\000\000\044\000\000\000\044\000\049\000\
    \000\000\049\000\049\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\028\000\030\000\000\000\000\000\029\000\029\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \028\000\013\000\000\000\000\000\000\000\000\000\010\000\004\000\
    \027\000\026\000\008\000\009\000\020\000\015\000\014\000\007\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\017\000\021\000\012\000\016\000\011\000\039\000\
    \006\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\023\000\038\000\022\000\037\000\018\000\
    \036\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\025\000\019\000\024\000\041\000\040\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\035\000\033\000\034\000\032\000\
    \031\000\255\255\255\255\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\046\000\048\000\045\000\
    \255\255\005\000\051\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\050\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\255\255\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\030\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\011\000\000\000\012\000\000\000\
    \013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\006\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\015\000\016\000\016\000\017\000\
    \019\000\044\000\046\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\042\000\047\000\042\000\
    \049\000\005\000\050\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\047\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\044\000\046\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\042\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\000\
    \255\255\049\000\255\255\050\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 49 "src/parser/JFLexer.mll"
                         ( advance_line lexbuf; token lexbuf )
# 204 "src/parser/JFLexer.ml"

  | 1 ->
# 50 "src/parser/JFLexer.mll"
                         ( token lexbuf )
# 209 "src/parser/JFLexer.ml"

  | 2 ->
# 51 "src/parser/JFLexer.mll"
                         ( LPAREN )
# 214 "src/parser/JFLexer.ml"

  | 3 ->
# 52 "src/parser/JFLexer.mll"
                         ( RPAREN )
# 219 "src/parser/JFLexer.ml"

  | 4 ->
# 53 "src/parser/JFLexer.mll"
                         ( LBRACE )
# 224 "src/parser/JFLexer.ml"

  | 5 ->
# 54 "src/parser/JFLexer.mll"
                         ( RBRACE )
# 229 "src/parser/JFLexer.ml"

  | 6 ->
# 55 "src/parser/JFLexer.mll"
                         ( LBRACK )
# 234 "src/parser/JFLexer.ml"

  | 7 ->
# 56 "src/parser/JFLexer.mll"
                         ( RBRACK )
# 239 "src/parser/JFLexer.ml"

  | 8 ->
# 57 "src/parser/JFLexer.mll"
                         ( EOC )
# 244 "src/parser/JFLexer.ml"

  | 9 ->
# 58 "src/parser/JFLexer.mll"
                         ( COMMA )
# 249 "src/parser/JFLexer.ml"

  | 10 ->
# 59 "src/parser/JFLexer.mll"
                         ( PIPE )
# 254 "src/parser/JFLexer.ml"

  | 11 ->
# 60 "src/parser/JFLexer.mll"
                         ( UNDERSCORE )
# 259 "src/parser/JFLexer.ml"

  | 12 ->
# 61 "src/parser/JFLexer.mll"
                         ( ASSIGN )
# 264 "src/parser/JFLexer.ml"

  | 13 ->
# 62 "src/parser/JFLexer.mll"
                         ( DOUBLEARROW )
# 269 "src/parser/JFLexer.ml"

  | 14 ->
# 63 "src/parser/JFLexer.mll"
                         ( SINGLEARROW )
# 274 "src/parser/JFLexer.ml"

  | 15 ->
# 64 "src/parser/JFLexer.mll"
                         ( PERIOD )
# 279 "src/parser/JFLexer.ml"

  | 16 ->
# 65 "src/parser/JFLexer.mll"
                         ( COLON )
# 284 "src/parser/JFLexer.ml"

  | 17 ->
# 66 "src/parser/JFLexer.mll"
                         ( EQ )
# 289 "src/parser/JFLexer.ml"

  | 18 ->
# 67 "src/parser/JFLexer.mll"
                         ( NEQ )
# 294 "src/parser/JFLexer.ml"

  | 19 ->
# 68 "src/parser/JFLexer.mll"
                         ( LT )
# 299 "src/parser/JFLexer.ml"

  | 20 ->
# 69 "src/parser/JFLexer.mll"
                         ( LTE )
# 304 "src/parser/JFLexer.ml"

  | 21 ->
# 70 "src/parser/JFLexer.mll"
                         ( GT )
# 309 "src/parser/JFLexer.ml"

  | 22 ->
# 71 "src/parser/JFLexer.mll"
                         ( GTE )
# 314 "src/parser/JFLexer.ml"

  | 23 ->
# 72 "src/parser/JFLexer.mll"
                         ( AND )
# 319 "src/parser/JFLexer.ml"

  | 24 ->
# 73 "src/parser/JFLexer.mll"
                         ( OR )
# 324 "src/parser/JFLexer.ml"

  | 25 ->
# 74 "src/parser/JFLexer.mll"
                         ( ADD )
# 329 "src/parser/JFLexer.ml"

  | 26 ->
# 75 "src/parser/JFLexer.mll"
                         ( SUB )
# 334 "src/parser/JFLexer.ml"

  | 27 ->
# 76 "src/parser/JFLexer.mll"
                         ( MULT )
# 339 "src/parser/JFLexer.ml"

  | 28 ->
# 77 "src/parser/JFLexer.mll"
                         ( DIV )
# 344 "src/parser/JFLexer.ml"

  | 29 ->
# 78 "src/parser/JFLexer.mll"
                         ( UNDERSCORE )
# 349 "src/parser/JFLexer.ml"

  | 30 ->
# 79 "src/parser/JFLexer.mll"
                         ( CBLOCK(cblock 0 lexbuf) )
# 354 "src/parser/JFLexer.ml"

  | 31 ->
let
# 80 "src/parser/JFLexer.mll"
                                                          s
# 360 "src/parser/JFLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 81 "src/parser/JFLexer.mll"
                         ( 
                          if StrMap.mem (String.uppercase s) keywords 
                          then StrMap.find (String.uppercase s) keywords
                          else ID(s) 
                         )
# 368 "src/parser/JFLexer.ml"

  | 32 ->
# 86 "src/parser/JFLexer.mll"
                         ( STRINGCONST(string_literal lexbuf) )
# 373 "src/parser/JFLexer.ml"

  | 33 ->
let
# 87 "src/parser/JFLexer.mll"
                                       f
# 379 "src/parser/JFLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 88 "src/parser/JFLexer.mll"
                         ( FLOATCONST(float_of_string f) )
# 383 "src/parser/JFLexer.ml"

  | 34 ->
let
# 89 "src/parser/JFLexer.mll"
                      i
# 389 "src/parser/JFLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 89 "src/parser/JFLexer.mll"
                         ( INTCONST(int_of_string i) )
# 393 "src/parser/JFLexer.ml"

  | 35 ->
# 90 "src/parser/JFLexer.mll"
                         ( EOF )
# 398 "src/parser/JFLexer.ml"

  | 36 ->
# 91 "src/parser/JFLexer.mll"
                         ( raise (Typechecker.ParseError("Unexpected character",
                                                      lexbuf.Lexing.lex_curr_p)) )
# 404 "src/parser/JFLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and cblock depth lexbuf =
    __ocaml_lex_cblock_rec depth lexbuf 42
and __ocaml_lex_cblock_rec depth lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 95 "src/parser/JFLexer.mll"
                         ( "{"^(cblock (depth+1) lexbuf) )
# 416 "src/parser/JFLexer.ml"

  | 1 ->
# 96 "src/parser/JFLexer.mll"
                         ( (if depth > 1 then "}"^(cblock (depth-1) lexbuf) else "") )
# 421 "src/parser/JFLexer.ml"

  | 2 ->
let
# 97 "src/parser/JFLexer.mll"
               s
# 427 "src/parser/JFLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 97 "src/parser/JFLexer.mll"
                         ( s^(cblock depth lexbuf) )
# 431 "src/parser/JFLexer.ml"

  | 3 ->
# 98 "src/parser/JFLexer.mll"
                         ( raise (Typechecker.ParseError("unterminated C block", 
                                                      lexbuf.Lexing.lex_curr_p)) )
# 437 "src/parser/JFLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_cblock_rec depth lexbuf __ocaml_lex_state

and string_literal lexbuf =
    __ocaml_lex_string_literal_rec lexbuf 47
and __ocaml_lex_string_literal_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 101 "src/parser/JFLexer.mll"
                         ( "\'"^(string_literal lexbuf) )
# 449 "src/parser/JFLexer.ml"

  | 1 ->
let
# 102 "src/parser/JFLexer.mll"
                s
# 455 "src/parser/JFLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 102 "src/parser/JFLexer.mll"
                          ( s^(string_literal lexbuf) )
# 459 "src/parser/JFLexer.ml"

  | 2 ->
# 103 "src/parser/JFLexer.mll"
                        ( "" )
# 464 "src/parser/JFLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_string_literal_rec lexbuf __ocaml_lex_state

;;

