@import jitd.codegen._
@import jitd.spec._
@import jitd.rewrite._
@(ctx:Render, headerFile:String)

#include "@headerFile"


///////////////////// Transform Definitions ///////////////////// 

@for(transform <- ctx.definition.transforms){
  void @{transform.name}(std::shared_ptr<JITDNode> &target){
    // Make sure that we hold a reference to the physical pointer
    std::shared_ptr<JITDNode> physicalLock = target;
    const JITDNode *from = physicalLock.get();

    // Check that the transform is valid (and extract fields)
    @{RenderPattern.test(ctx, transform.from, "from", "return;")}

    // Build the new root
    @{RenderPattern.build(ctx, transform.to, "to", 
      transform.unifiedInitializers(RenderPattern.varMapping(ctx, transform.from, "from")))}

    // (if relevant) any follow-up code
    @{ctx.statement(
        Inline(
          transform.body, 
          RenderPattern.varMapping(ctx, transform.from, "from")++
          RenderPattern.varMapping(ctx, transform.to, "to")
        )
      )}

    // and link the rewritten node back into the tree
    target = to;
  }
}

///////////////////// Accessor Definitions ///////////////////// 

@for( accessor <- ctx.definition.accessors ) {
  @{RenderAccessor.declaration(accessor, ctx, prefix = "JITD::")} {
    @{RenderAccessor.body(accessor, ctx)}
  }
}