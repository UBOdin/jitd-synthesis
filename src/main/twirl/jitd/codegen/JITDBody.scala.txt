@import jitd.codegen._
@import jitd.spec._
@import jitd.rewrite._
@import jitd.Debug
@(ctx:Render, headerFile:String)

#include <stack>
#include <sstream>
#include "runtime.hpp"
#include "@headerFile"


//#define JITD_DEBUG_POLICY true;
//std::shared_ptr<JITDNode> * rootHandleRef;


///////////////////// Transform Definitions ///////////////////// 

@for(transform <- ctx.definition.transforms){
@RenderFunction.body(ctx, TransformToFunction(ctx.definition, transform,"JITD::"),false)
}

///////////////////// Accessor Definitions ///////////////////// 

@for( accessor <- ctx.definition.accessors ) {
@{RenderFunction.body(ctx, AccessorToFunction(ctx.definition, accessor, "jitd_accessor_"),false)}
}

///////////////////// Mutator Definitions ///////////////////// 

@for( mutator <- ctx.definition.mutators ) {
@{RenderFunction.body(ctx, MutatorToFunction(ctx.definition, mutator, "JITD::"),false)}
@{RenderFunction.body(ctx, MutatorToFunctionAfter(ctx.definition, mutator, "JITD::after_"),true)}

}

///////////////////// Policy Implementation ///////////////////// 

@ctx.policyImplementation.utilityFunctions(ctx)


int JITD::organize_wait()
{
  
    int t = 0;
   
    bool not_done = true;
    while(true)
    {

      if(this->work_queue.empty() && not_done == true)
      {
        
        not_done = this->do_organize();
        t++;
        std::cout<<"JITD_PRINT ";
        this->print_debug();
        check_pq();
      }
      else
      {
        mutatorCqElement pop_mce;
        
        this->work_queue.pop(pop_mce);
        if(pop_mce.flag == EXIT)
        {
          return t;
        }
        else if(pop_mce.flag == INSERT)
        {
            this->after_insert(pop_mce.element);
            not_done = true;
            std::cout<<"INSERT_PRINT ";
            this->print_debug();
        } 
        else if(pop_mce.flag == REMOVE)
        {
            this->after_remove_elements(pop_mce.element);
            not_done = true;
            std::cout<<"DELETE_PRINT ";
            this->print_debug();
        }
        else
        {
          std::cerr<<"Invalid Mutator Operation"<<std::endl;
          exit(-1);
        }
        
      }
      
    
    }   
    
   
       
  return t;
}

bool JITD::do_organize()
{
  
  @ctx.policyImplementation.doOrganize(ctx, "(*(this->jitd_root))")
}
///////////////////// Set/PQ populate ///////////////////// 

void JITD::SetPqErase(std::shared_ptr<JITDNode> * node_handle)
{
  #ifdef DEBUG
    assert(node_handle!=NULL);
  #endif
  std::shared_ptr<JITDNode> node_ptr = std::atomic_load((node_handle));
   #ifdef DEBUG
    assert(node_ptr!=NULL);
  #endif
  switch((node_ptr)->type){
    @for(node <- ctx.definition.nodes) {
      case @node.enumName : {
          @{RenderPattern.SetPopulate(ctx,ctx.policy.rule,"erase","node_handle",s"${node.name}",s"${node.enumName}");}
          @{RenderPattern.PQPopulate(ctx,ctx.policy.rule,"erase","node_handle",s"${node.name}",s"${node.enumName}");}
          };break;
        }
        default:{std::cerr << "Unhandled Node Type in get" << std::endl;
        exit(-1);};break;
      }
      #ifdef DEBUG
        //check_pq();
      #endif 
}
void JITD::SetPqAdd(std::shared_ptr<JITDNode> * node_handle)
{
 #ifdef DEBUG
    assert(node_handle!=NULL);
  #endif
  std::shared_ptr<JITDNode> node_ptr = std::atomic_load((node_handle));
   #ifdef DEBUG
    assert(node_ptr!=NULL);
  #endif
  switch((node_ptr)->type){
    @for(node <- ctx.definition.nodes) {
      case @node.enumName : {
          @{RenderPattern.SetPopulate(ctx,ctx.policy.rule,"emplace","node_handle",s"${node.name}",s"${node.enumName}");}
          @{RenderPattern.PQPopulate(ctx,ctx.policy.rule,"emplace","node_handle",s"${node.name}",s"${node.enumName}");}
          };break;
        }
      default:{std::cerr << "Unhandled Node Type in get" << std::endl;
      exit(-1);};break;
      }
      #ifdef DEBUG
        //check_pq();
      #endif  
}
/*
bool JITD::noMatch(std::shared_ptr<JITDNode> * node_handle)
{

  std::shared_ptr<JITDNode> node_ptr = std::atomic_load((node_handle));
  JITDNode *iter_node = (node_handle)->get();
  bool erased = false;
  switch((node_ptr)->type){
    @for(node <- ctx.definition.nodes) {
      case @node.enumName : {
          break;
        }
        }
      default:{std::cerr << "Unhandled Node Type in noMatch" << std::endl;
      exit(-1);};break;
      }
    return erased;   

}*/
///////////////////// Debugging Utilities ///////////////////// 

std::shared_ptr<JITD> assemble_jitd(std::istream &in)
{
  std::string op, line;

  std::stack<std::shared_ptr<JITDNode>> node_stack;
  std::shared_ptr<JITDNode> jitd_root_handle;
  while(getline(in, line)){
    std::basic_istringstream<char> toks(line);
    int columns = 0;
    toks >> op;
    @for(node <- ctx.definition.nodes){
      if(op == "@node.name"){
        @for(field <- node.fields.reverse){

          // Construct a @field.name
          @ctx.cType(field.t) @field.name;
          @{ field.t match {
            case TRecord() => s""

            //case TArray(TRecord()) => s"load_records_from_file_ycsb(${field.name}, toks,columns);"
            case TArray(TRecord()) => s"load_records(${field.name}, toks);"

            case TNodeRef() => s"${field.name} = node_stack.top(); node_stack.pop();"

            case TKey() => s"${field.name} = load_key(toks);"

            case _ => "std::cout << \"Unsupported generator field type: "+field.t.toString+"\" << std::endl; exit(-1);"
          }}
        }

        // Assemble everything into a @node.name
        node_stack.emplace(new @{node.renderName}(@{node.fields.map { _.name }.mkString(", ")}));
      

      } else 
    }
    
    if(op == "Return")
    {
      return std::shared_ptr<JITD>(new JITD(std::shared_ptr<std::shared_ptr<JITDNode>>(std::make_shared<std::shared_ptr<JITDNode>>(std::shared_ptr<JITDNode>(node_stack.top())))));
    }
    else {
      std::cerr << "Invalid assembly instruction '"<<op<<"'" << std::endl; 
      exit(-1); 
      return std::shared_ptr<JITD>();
    }
  }
  std::cerr << "Reached end of build with no Return" << std::endl; 
  exit(-1); 
}
void JITD::print_pq()
{

  
}
void JITD::check_pq()
{
  
  if(!this->CrackArray_PQ.empty())
  { 
      std::set<std::shared_ptr<JITDNode> *>::iterator it;
      std::cout<<"SIZE OF CRACK PQ"<<CrackArray_PQ.size()<<"."<<std::endl;
      for(it = this->CrackArray_PQ.begin();it!=this->CrackArray_PQ.end();++it)
      {
        
          assertm("CrackArray_PQ",(*it!=NULL));

          std::shared_ptr<JITDNode> * curr = *it;
          std::cout<<"Address of shared_ptr: "<<*curr<<std::endl;

          assertm("CrackArray_PQ",(*curr!=NULL));
          //assertm("CrackArray_PQ",((*curr).get()!=NULL));
          assertm("CrackArray_PQ",(curr->get()!=NULL));
          
          
            
            
          
          
        
        
       
      }
        
  }
  
if(!this->JITD_NODE_Concat_set.empty())
  { 
      std::set<std::shared_ptr<JITDNode> *>::iterator it;
      std::cout<<"SIZE OF CONCAT SET"<<JITD_NODE_Concat_set.size()<<"."<<std::endl;
      for(it = this->JITD_NODE_Concat_set.begin();it!=this->JITD_NODE_Concat_set.end();++it)
      {
          assertm("JITD_NODE_Concat_set",(*it!=NULL));

          std::shared_ptr<JITDNode> * curr = *it;
          std::cout<<"Address of shared_ptr: "<<*curr<<std::endl;

          assertm("JITD_NODE_Concat_set",(*curr!=NULL));
          //assertm("JITD_NODE_Concat_set",((*curr).get()!=NULL));
          assertm("JITD_NODE_Concat_set",(curr->get()!=NULL));
          
            
              
            
          
          
        
       
      }
      }
  
}

void JITD::initialize_struts(std::shared_ptr<JITDNode>* node)
{
  std::shared_ptr<JITDNode> target_root_lock = std::atomic_load((node));
  switch(target_root_lock->type)
  {
    @for(node <- ctx.definition.nodes) {
      case @node.enumName : {
      @{RenderPattern.SetPopulate(ctx,ctx.policy.rule,"emplace","node",s"${node.name}",s"${node.enumName}");}
      @{RenderPattern.PQPopulate(ctx,ctx.policy.rule,"emplace","node",s"${node.name}",s"${node.enumName}");}
      @node.renderName *node_real = (@node.renderName *)target_root_lock.get();
        @{  val children = node.fields.filter { _.t == TNodeRef() }
            if(children.size > 0){
              
              children.map { f => 
                "initialize_struts(&(node_real->"+f.name+"));\n"
              }.mkString
            } else { "" }
        } 
        break;      
      }

    }

  }
}
void print_JITD_node_structure(std::shared_ptr<JITDNode> node, const std::string &prefix){ 

  switch(node->type){
    @for(node <- ctx.definition.nodes) {
      case @node.enumName : {
        @node.renderName *node_real = (@node.renderName *)node.get();
        std::cout << prefix << "@{node.name}(addr:"<<node_real<<")[ "
        @{ node.fields.filter { _.t != TNodeRef() }
            .map { f => 
                "<< \"" + f.name + "=\" << " +
                ctx.printableValue("node_real->"+f.name, f.t) 
            }.mkString(" << \", \"") };

        @{  val children = node.fields.filter { _.t == TNodeRef() }
            if(children.size > 0){
              "std::cout << std::endl;\n"+
              children.map { f => 
                "print_JITD_node_structure(node_real->"+f.name+", prefix+std::string(\"  \"));\n"
              }.mkString+
              "std::cout << prefix;"
            } else { "" }
        } 
        std::cout << " ]" << std::endl;
        break;
      }
    }
  }
}


void print_JITD_node_structure_viz(std::shared_ptr<JITDNode> node,std::shared_ptr<JITDNode> parent){ 

  switch(node->type){
    @for(node <- ctx.definition.nodes) {
      case @node.enumName : {
        @node.renderName *node_real = (@node.renderName *)node.get();
        switch(parent->type){
          @for(node <- ctx.definition.nodes) {
          case @node.enumName : {
              std::cout << "@{node.name}(addr:"<<node_real<<")[] -> ";

          break;}

          }
        }

        std::cout << "@{node.name}(addr:"<<node_real<<")[] "<<std::endl;
        

        @{  val children = node.fields.filter { _.t == TNodeRef() }
            if(children.size > 0){
              "std::cout << std::endl;\n"+
              children.map { f => 
                "print_JITD_node_structure_viz(node_real->"+f.name+",node);\n"
              }.mkString
            } else { "" }
        } 
        //std::cout << " ]" << std::endl;
        break;
      }
    }
  }
}
