@import jitd.codegen._
@import jitd.spec._
@import jitd.rewrite._
@import jitd.Debug
@(ctx:Render, headerFile:String)

#include <stack>
#include <sstream>
#include "runtime.hpp"
#include "@headerFile"
std::vector<float> time_vec_PushDownAndCrack;
std::vector<float> time_vec_CrackArray;
std::vector<float> time_vec_PushDownDontDeleteElemBtree;
std::vector<float> time_vec_PushDownDontDeleteElemConcat;
std::vector<float> time_vec_SortArray;
std::vector<float> time_vec_DeleteElemFromSortedArray;

@for(node <- ctx.definition.nodes){
 std::set<std::shared_ptr<JITDNode> * >@{node.enumName}_set;
  }

std::set<std::shared_ptr<JITDNode> *, cmpclass> JITD_NODE_Array_pq;
    std::set<std::shared_ptr<JITDNode> *, cmpclass > JITD_NODE_SortedArray_pq;
    std::set<std::shared_ptr<JITDNode> * > JITD_NODE_BTree_pq;
    std::set<std::shared_ptr<JITDNode> * > JITD_NODE_Concat_pq;
    std::set<std::shared_ptr<JITDNode> * > JITD_NODE_Delete_pq;
    std::set<std::shared_ptr<JITDNode> * > JITD_NODE_DeleteElements_pq;

//#define JITD_DEBUG_POLICY true;
//std::shared_ptr<JITDNode> * rootHandleRef;


///////////////////// Transform Definitions ///////////////////// 

@for(transform <- ctx.definition.transforms){
@RenderFunction.body(ctx, TransformToFunction(ctx.definition, transform))
}

///////////////////// Accessor Definitions ///////////////////// 

@for( accessor <- ctx.definition.accessors ) {
@{RenderFunction.body(ctx, AccessorToFunction(ctx.definition, accessor, "jitd_accessor_"))}
}

///////////////////// Mutator Definitions ///////////////////// 

@for( mutator <- ctx.definition.mutators ) {
@{RenderFunction.body(ctx, MutatorToFunction(ctx.definition, mutator, "JITD::"))}
}

///////////////////// Policy Implementation ///////////////////// 

@ctx.policyImplementation.utilityFunctions(ctx)

bool JITD::do_organize()
{
  //std::cout<<"calling do organize"<<std::endl;
  @ctx.policyImplementation.doOrganize(ctx, "(this->root)")
}
///////////////////// Set creation ///////////////////// 


void setInit(std::shared_ptr<JITDNode> * &root_handle,bool set_flag)
{

  //Init code when jitd is first populated
  std::shared_ptr<JITDNode> set_node = std::atomic_load((root_handle));
   JITDNode *lock_raw = set_node.get();
  switch(set_node->type)
  {
    @for(node <- ctx.definition.nodes){
      case @node.enumName : 
      {
        //std::cout<<"FOUND: "<<set_node->type<<std::endl;

        @{node.enumName}_set.emplace(root_handle);

        
        @{node.renderName} *updated_node = (@{node.renderName} *)lock_raw;
          std::shared_ptr<JITDNode> * child_nodeHandleRef;
        @for(field <- node.fields.filter { _.t == TNodeRef() }){
            child_nodeHandleRef = &(updated_node->@{field.name}); 
            setInit(child_nodeHandleRef,false);
          }
        break;
      }
      
    }
  }
}

void pqInit(std::shared_ptr<JITDNode> * &root_handle,bool set_flag)
{

  //Init code when jitd is first populated
  std::shared_ptr<JITDNode> set_node = std::atomic_load((root_handle));
   JITDNode *lock_raw = set_node.get();
  switch(set_node->type)
  {
    @for(node <- ctx.definition.nodes){
      case @node.enumName : 
      {
        //std::cout<<"FOUND "<< @node.enumName <<" : "<<root_handle<<std::endl;

        @{node.enumName}_pq.emplace(root_handle);

        @{node.renderName} *updated_node = (@{node.renderName} *)lock_raw;
          std::shared_ptr<JITDNode> * child_nodeHandleRef;
        @for(field <- node.fields.filter { _.t == TNodeRef() }){
            child_nodeHandleRef = &(updated_node->@{field.name}); 
            pqInit(child_nodeHandleRef,false);
          }
       
       break;
      }
      
    }
  }
}
void setAddition(std::shared_ptr<JITDNode> * node)
{
  std::shared_ptr<JITDNode> set_node = std::atomic_load((node));
  JITDNode *lock_raw = set_node.get();
  switch(set_node->type)
  {
    @for(node <- ctx.definition.nodes){
      case @node.enumName : 
      {
        //std::cout<<"FOUND ADD: "<<set_node->type<<std::endl;

        @{node.enumName}_set.emplace(node);
        
        break;
      }
      
    }
  }
}
void pqAddition(std::shared_ptr<JITDNode> * node)
{
  std::shared_ptr<JITDNode> set_node = std::atomic_load((node));
  JITDNode *lock_raw = set_node.get();
  switch(set_node->type)
  {
    @for(node <- ctx.definition.nodes){
      case @node.enumName : 
      {
        //std::cout<<"FOUND ADD: "<<set_node->type<<"Addr : "<<set_node<<std::endl;

        @{node.enumName}_pq.emplace(node);
        
        break;
      }
      
    }
  }
}
void setRemoval(std::shared_ptr<JITDNode> * node)
{
  std::shared_ptr<JITDNode> set_node = std::atomic_load((node));
  JITDNode *lock_raw = set_node.get();
  switch(set_node->type)
  {
    @for(node <- ctx.definition.nodes){
      case @node.enumName : 
      {
        //std::cout<<"FOUND ERASE: "<<set_node->type<<std::endl;

        @{node.enumName}_set.erase(node);
        
        break;
      }
      
    }
  }
}
void pqRemoval(std::shared_ptr<JITDNode> * node)
{
  std::shared_ptr<JITDNode> set_node = std::atomic_load((node));
  JITDNode *lock_raw = set_node.get();
  switch(set_node->type)
  {
    @for(node <- ctx.definition.nodes){
      case @node.enumName : 
      {
        //std::cout<<"FOUND ERASE: "<<set_node->type<<std::endl;

        @{node.enumName}_pq.erase(node);
        
        break;
      }
      
    }
  }
}
///////////////////// Debugging Utilities ///////////////////// 

std::shared_ptr<JITD> assemble_jitd(std::istream &in)
{
  std::string op, line;

  std::stack<std::shared_ptr<JITDNode>> node_stack;
  std::shared_ptr<JITDNode> jitd_root_handle;
  while(getline(in, line)){
    std::basic_istringstream<char> toks(line);
    toks >> op;

    @for(node <- ctx.definition.nodes){
      if(op == "@node.name"){
        @for(field <- node.fields.reverse){

          // Construct a @field.name
          @ctx.cType(field.t) @field.name;
          @{ field.t match {
            
            case TArray(TRecord()) => s"load_records(${field.name}, toks);"
            
            case TNodeRef() => s"${field.name} = node_stack.top(); node_stack.pop();"

            case TKey() => s"${field.name} = load_key(toks);"

            case _ => "std::cout << \"Unsupported generator field type: "+field.t.toString+"\" << std::endl; exit(-1);"
          }}
        }

        // Assemble everything into a @node.name
        node_stack.emplace(new @{node.renderName}(@{node.fields.map { _.name }.mkString(", ")}));
      

      } else 
    }
    if(op == "Return"){
    
      return std::shared_ptr<JITD>(new JITD(node_stack.top()));

    }
    else {
      std::cerr << "Invalid assembly instruction '"<<op<<"'" << std::endl; 
      exit(-1); 
      return std::shared_ptr<JITD>();
    }
  }
  std::cerr << "Reached end of build with no Return" << std::endl; 
  exit(-1); 
}

void print_JITD_node_structure(std::shared_ptr<JITDNode> node, const std::string &prefix){ 
//std::cout<<"In print"<<rootHandleRef->get()->type<<std::endl;
  switch(node->type){
    @for(node <- ctx.definition.nodes) {
      case @node.enumName : {
        @node.renderName *node_real = (@node.renderName *)node.get();
        std::cout << prefix << "@{node.name}[ "
        @{ node.fields.filter { _.t != TNodeRef() }
            .map { f => 
                "<< \"" + f.name + "=\" << " +
                ctx.printableValue("node_real->"+f.name, f.t) 
            }.mkString(" << \", \"") };
        @{  val children = node.fields.filter { _.t == TNodeRef() }
            if(children.size > 0){
              "std::cout << std::endl;\n"+
              children.map { f => 
                "print_JITD_node_structure(node_real->"+f.name+", prefix+std::string(\"  \"));\n"
              }.mkString+
              "std::cout << prefix;"
            } else { "" }
        } 
        std::cout << " ]" << std::endl;
        break;
      }
    }
  }
}

void print_set()
{
//std::cout<<"calling print_set"<<std::endl;

  @for(node <- ctx.definition.nodes){
  if(!@{node.enumName}_set.empty())
  {
    std::cout<<"@{node.enumName}_set:" << @{node.enumName}_set.size()<<std::endl;
    
  }
  
  }
}
void print_pq()
{
//std::cout<<"calling print_set"<<std::endl;

  @for(node <- ctx.definition.nodes){
  if(!@{node.enumName}_pq.empty())
  {
    std::cout<<"@{node.enumName}_pq:" << @{node.enumName}_pq.size()<<std::endl;
    
  }
  
  }
}
void check_set()
{
  @for(node <- ctx.definition.nodes){
    if(!@{node.enumName}_set.empty())
    {
      std::set<std::shared_ptr<JITDNode> *>::iterator it;
      for(it = @{node.enumName}_set.begin();it!=@{node.enumName}_set.end();++it)
      {
        std::shared_ptr<JITDNode> * curr = *it;
        std::cout<<"check_set():The type of node in @{node.enumName} is "<<curr->get()->type<<std::endl;
      }
    }
    else
    {
      std::cout<<"Empty @{node.enumName}_set"<<std::endl;
    }
  }
}
void check_pq()
{
  @for(node <- ctx.definition.nodes){
    if(!@{node.enumName}_pq.empty())
    { 
        std::set<std::shared_ptr<JITDNode> *>::iterator it;
      for(it = @{node.enumName}_pq.begin();it!=@{node.enumName}_pq.end();++it)
      {
        std::shared_ptr<JITDNode> * curr = *it;
        std::cout<<"check_pq():The type of node in @{node.enumName} is "<<curr->get()->type<<std::endl;
        //if(curr->get()->type == JITD_NODE_Array)
        //{
         // std::cout<<"SIZE : "<<array_size(((ArrayNode *)(curr->get()))->data)<<std::endl;
        //}
      }
        
    }
    else
    {
      std::cout<<"Empty @{node.enumName}_pq"<<std::endl;
    }
  }

}
void print_time_vector_sum()
{
  
  //std::cout<<"printing time vec sum"<<std::endl;
  if(time_vec_PushDownAndCrack.size()!=0)
  {
    float sum_of_elems=0.0; 
    //std::cout<<"The SearchForPushDownCrack Vec:";
    for (auto& n : time_vec_PushDownAndCrack)
    {
      sum_of_elems += n;
      //std::cout<<n<<",";
    }
    //std::cout<<"\nTime for PushDownAndCrack "<<sum_of_elems<<"us"<<std::endl;
  }
  if(time_vec_CrackArray.size()!=0)
  {
    float sum_of_elems=0.0; 
    //std::cout<<"The SearchForCrack Vec:";
    for (auto& n : time_vec_CrackArray)
    {
      sum_of_elems += n;
      //std::cout<<n<<",";
    }
    //std::cout<<"\nTime for CrackArray "<<sum_of_elems<<"us"<<std::endl;
  }
  if(time_vec_PushDownDontDeleteElemBtree.size()!=0)
  {
    float sum_of_elems=0.0; 
    //std::cout<<"The SearchForPushDownDeleteBtree Vec:";
    for (auto& n : time_vec_PushDownDontDeleteElemBtree)
    {
      sum_of_elems += n;
      //std::cout<<n<<",";
    }
    //std::cout<<"\nTime for PushDownDontDeleteElemBtree "<<sum_of_elems<<"us"<<std::endl;
  }
  if(time_vec_PushDownDontDeleteElemConcat.size()!=0)
  {
    float sum_of_elems=0.0; 
    //std::cout<<"The SearchForPushDownDeleteConcat Vec:";
    for (auto& n : time_vec_PushDownDontDeleteElemConcat)
    {
      sum_of_elems += n;
      //std::cout<<n<<",";
    }
    //std::cout<<"\nTime for PushDownDontDeleteElemConcat "<<sum_of_elems<<"us"<<std::endl;
  }
  if(time_vec_SortArray.size()!=0)
  {
    float sum_of_elems=0.0;  
    //std::cout<<"The SearchForSortArray Vec:";
    for (auto& n : time_vec_SortArray)
    {
      sum_of_elems += n;
      //std::cout<<n<<",";
    }
    //std::cout<<"\nTime for SortArray "<<sum_of_elems<<"us"<<std::endl;
  }
  if(time_vec_DeleteElemFromSortedArray.size()!=0)
  {
    float sum_of_elems=0.0; 
    //std::cout<<"The SearchForPushDownDeleteSortedArray Vec:";
    for (auto& n : time_vec_DeleteElemFromSortedArray)
    {
      sum_of_elems += n;
     //std::cout<<n<<",";
    }
    //std::cout<<"\nTime for DeleteElemFromSortedArray "<<sum_of_elems<<"us"<<std::endl;
  }
}