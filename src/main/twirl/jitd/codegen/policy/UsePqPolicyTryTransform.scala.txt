@import jitd.spec._
@import jitd.codegen._
@import jitd.Debug
@(ctx:Render, root:String, transform:String, onSuccess:String, onFail:String)

@debug(msg:String) = { @{Debug.println(Debug.Policy, "  ")(msg)} }
@dump = { @{Debug.dump(Debug.Policy, "  ")("target", "    ")} }

{
  @{ctx.cType(TNodeRef())} * targetHandleRef;
  
  //std::shared_ptr<JITDNode> target;
  //std::cout<<"Before calling searchFor@{transform}" <<std::endl;
  //this->print_debug();
  //check_pq();

  long bestScore = searchFor@{transform}(
    targetHandleRef
  );
  //std::cout<<"After calling searchFor@{transform} Best Score is "<<bestScore<<std::endl;
  if(bestScore >= 0) {
  
    //std::cout<<"Candidate shared_ptr for @{transform}: "<<(*targetHandleRef)<<std::endl;
    
      #ifdef TRANSFORM_COUNT
    @{transform}_count++;
    #endif
      @{transform}(targetHandleRef);
    
    @onSuccess
  } 
  
  
  
  else { 
    @onFail 
  }







}


