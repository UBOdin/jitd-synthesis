@import jitd.spec._
@import jitd.codegen._
@import jitd.rewrite.InlineVars
@import jitd.Debug
@(ctx:Render, transform:Transform, constraint:Expression, scoreFn:Expression)

/*
bool JITD::noMatch@{transform.name}(std::shared_ptr<JITDNode> * &node)
{
  JITDNode *iter_node = (node)->get();
  @{RenderPattern.test(ctx, transform.from, "iter_node", "return true;")}
  return false;
}*/



  long JITD::searchFor@{transform.name}(          // Return the "best" score available 
    std::shared_ptr<JITDNode> * &targetHandleRef // Return value: The pointer with the "best" score
  ) {
  
    std::cout<<"STARTING search@transform.name"<<std::endl;
    int count = 0;
    long best_score = -1;
    long curr_score = -1;
    if(!(this->@{RenderPattern.setGen(ctx, transform.from)}).empty())
    {
      
      std::set< std::shared_ptr<JITDNode> * >::iterator it;
      it = (this->@{RenderPattern.setGen(ctx, transform.from)}).begin(); 
       JITDNode *iter_node = (*it)->get();
          
            
          @{RenderPattern.test(ctx, transform.from, "iter_node", "return -1;",Some(RenderPattern.setGen(ctx, transform.from)))}
          
          if(@{ctx.expression(InlineVars(constraint, 
            RenderPattern.varMapping(ctx, transform.from, "iter_node")++
             ctx.policy.varMapping
          ))}){
            best_score = @{ctx.expression(InlineVars(scoreFn, 
            RenderPattern.varMapping(ctx, transform.from, "iter_node")++
            ctx.policy.varMapping
          ))};
          }

          targetHandleRef = (*it);  

    }
    return best_score;
  }
