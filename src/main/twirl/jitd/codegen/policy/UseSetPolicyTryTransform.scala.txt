@import jitd.spec._
@import jitd.codegen._
@import jitd.Debug
@(ctx:Render, root:String, transform:String, onSuccess:String, onFail:String)

@debug(msg:String) = { @{Debug.println(Debug.Policy, "  ")(msg)} }
@dump = { @{Debug.dump(Debug.Policy, "  ")("target", "    ")} }


  @{ctx.cType(TNodeRef())} * targetHandleRef;
  @{ctx.cType(TNodeRef())}  lock_raw_shrd_ptr;
  std::shared_ptr<JITDNode> target;
  timeval start, end;

  //std::shared_ptr<JITDNode> * rootHandleRef = &(*jitd_root);
  
  gettimeofday(&start,NULL);
  long bestScore = searchFor@{transform}(
  targetHandleRef
  );
  //check_set();
  //std::cout<<"SearchComplete:"<<std::endl;
  gettimeofday(&end,NULL);
  float totalTime = (end.tv_sec - start.tv_sec) * 1000000.0 + (end.tv_usec - start.tv_usec);
  time_vec_@{transform}.push_back(totalTime);
  if(bestScore >= 0) {
  
    //std::cout<<"POLICYSEARCHTRY:"<<(*(targetHandleRef)).get()->type<<std::endl;
    @{transform}(targetHandleRef);
    #ifdef TRANSFORM_COUNT
    @{transform}_count++;
    #endif
    //check_set();
    //std::cout<<"TRANSFORM DONE"<<std::endl;
    @onSuccess
  } else { 
    @onFail 
  }










