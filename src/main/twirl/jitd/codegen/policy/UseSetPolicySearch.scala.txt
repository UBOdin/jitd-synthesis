@import jitd.spec._
@import jitd.codegen._
@import jitd.rewrite.InlineVars
@import jitd.Debug
@(ctx:Render, transform:Transform, constraint:Expression, scoreFn:Expression)

  long searchFor@{transform.name}(          // Return the "best" score available
    std::shared_ptr<JITDNode> * &node,  // Pointer to the node we're currently examining      
    std::shared_ptr<JITDNode> * &targetHandleRef // Return value: The pointer with the "best" score
  ) {
  

    int count = 0;
    long bestScore = -1;
    long curr_score = -1;
    
    if(!JITD_NODE_Array_set.empty())
    {
      //std::cout<<"TRANSFORM: JITD_NODE_Array_set:" << JITD_NODE_Array_set.size()<<std::endl;
      std::set< std::shared_ptr<JITDNode>  >::iterator it;
      for(it = JITD_NODE_Array_set.begin(); it!=JITD_NODE_Array_set.end(); ++it)
      {
          std::cout<<"Searching:value in loop"<<count<<std::endl;

          JITDNode *iter_node = it->get();
          std::cout<<"Searching:the type of node on iteration"<<iter_node->type<<std::endl;
          count++;
          if(iter_node->type!=JITD_NODE_Array){break;}
          ArrayNode *iter_node_real = (ArrayNode *)iter_node;
          bestScore = array_size(iter_node_real->data);
          if(bestScore>curr_score)
          {
            curr_score = bestScore;
            //std::cout<<"Curr Score:"<<curr_score<<std::endl;
            targetHandleRef = (std::shared_ptr<JITDNode> *)&(*it);
            std::cout<<"Searching:POLICYSEARCH: "<<(*(targetHandleRef)).get()->type<<" SIZE: " <<bestScore<<std::endl;
          }
          
      }
    }





    return bestScore;
  }
