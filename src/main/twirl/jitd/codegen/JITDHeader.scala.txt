@import jitd.codegen._
@import jitd.spec._
@(ctx:Render)

///////////////////// Headers ///////////////////// 

#include <iostream>
#include <vector>
#include <set>
#include <queue>
#include <memory>
#include <algorithm>
#include <ios>
#include <functional>
#include <sys/time.h>
#include <pthread.h>
#include "tbb/concurrent_queue.h" 
#include <condition_variable>
#include<mutex>
@for(include <- ctx.definition.includes) { 
#include "@include"
}
@if(ctx.debug){
  #define JITD_DEBUG(cmd) std::cerr << cmd;
} else {
  #define JITD_DEBUG(cmd)
}
 
///////////////////// Structures ///////////////////// 

@ctx.structTypedefs

///////////////////// Base Node Meta ///////////////////// 

typedef enum { 
  @for(node <- ctx.definition.nodes) {
    @node.enumName, 
  }
} JITDNodeType;

class JITDNode {
  public: 
  JITDNode(JITDNodeType type) : type(type) {}

  JITDNodeType type;
  @{ctx.policyImplementation.state(ctx)}
};

typedef std::function<void(std::shared_ptr<JITDNode> &new_node)> UpdateHandle;

struct mutatorCqElement{
  int flag;
  std::pair<std::shared_ptr<std::shared_ptr<JITDNode>>,std::shared_ptr<std::shared_ptr<JITDNode>>> element;
};
///////////////////// Node Type Definitions ///////////////////// 

@for(node <- ctx.definition.nodes){
class @{node.renderName} : public JITDNode { 
  public:
  @{node.renderName}( @{ node.fields.map { ctx.fieldDefn(_, passByRef=true, isConst=true) }.mkString(", " )} ) : 
    JITDNode(@{node.enumName})
    @for(field <- node.fields){,
      @{field.name}(@{field.name})
    }
  {}
  @for(constructor <- node.constructors ){
    @{node.renderName}(@{constructor.args.map{ ctx.fieldDefn(_, passByRef=true, isConst=true) }.mkString(", " )}):
      JITDNode(@{node.enumName})
        @{constructor.defaults.map{", "+ctx.expression(_)}.mkString("")}
        @{ctx.statement(constructor.body)}
  }
  @for(field <- node.fields.filter { _.t == TNodeRef() }){
    void update_@{field.name}_handle(std::shared_ptr<JITDNode> &new_value){
      @{field.name} = new_value;
    }
  }

  public: @for(field <- node.fields){ 
    @{ctx.fieldDefn(field)}; 
  }
};
}

///////////////////// Transform Definitions ///////////////////// 

typedef enum { 
  @for(transform <- ctx.definition.transforms) {
   @transform.enumName,
  }
} JITDTransformType;



///////////////////// JITD Debug Methods ///////////////////// 

class JITD;
std::shared_ptr<JITD> assemble_jitd(std::istream &in);
void print_JITD_node_structure(std::shared_ptr<JITDNode> node, const std::string &prefix);
void print_time_vector_sum();
void print_search_time_vector_sum();
   
///////////////////// JITD Accessors ///////////////////// 

@for( accessor <- ctx.definition.accessors ) {
  @{RenderAccessor.declaration( accessor, ctx, prefix="jitd_accessor_" )};
}
///////////////////// JITD Definition ///////////////////// 


      
    






class JITD {
  
  public:
    pthread_mutex_t lock;

    //std::mutex exit_mtx;
    //std::condition_variable exit_cv;
    //bool exit_flag = false;

    @{RenderPattern.ComparatorClass(ctx,ctx.policy.rule);}
    @{RenderPattern.SetPqDeclare(ctx,ctx.policy.rule,true);}
    
    tbb::concurrent_bounded_queue<mutatorCqElement> common_cq;
    JITD(std::shared_ptr<std::shared_ptr<JITDNode>> jitd_root) : jitd_root(jitd_root)
    {
      if (pthread_mutex_init(&lock, NULL) != 0) { 
        std::cerr<<"\n mutex init has failed\n"<<std::endl; 
        exit(-1);
      }

      @ctx.policyImplementation.init(ctx,ctx.policy.rule,"(*(this->jitd_root))")
    }
    

    @for(transform <- ctx.definition.transforms){
    bool @{transform.name}(std::shared_ptr<JITDNode> * &targetHandleRef);
    }

    @for( accessor <- ctx.definition.accessors ) {
      @{RenderAccessor.declaration( accessor, ctx, root = true )} {
        return @RenderAccessor.renderCall( accessor, ctx, "*jitd_root", "jitd_accessor_" );
      }
    }

    @for( mutator <- ctx.definition.mutators ) {
      @{RenderMutator.declaration( mutator, ctx )}
    }
    
    
   
    void print_pq();
    void check_pq();
    void SetPqErase(std::shared_ptr<JITDNode> * node_handle);
    void SetPqAdd(std::shared_ptr<JITDNode> * node_handle);
    void print_debug() {print_JITD_node_structure(*jitd_root, std::string("")); }
    bool do_organize();
    int organize_process();
    int organize_wait();
    void process_cq(mutatorCqElement &pop_mce);
    void check_pq_intergrity(){check_pq();};
    void print_pq_size() {print_pq();}
    
    @for(transform <- ctx.definition.transforms){
    long searchFor@{transform.name}(std::shared_ptr<JITDNode> * &targetHandleRef);}
    
    
  private:

    //std::shared_ptr<JITDNode> root;
    std::shared_ptr<std::shared_ptr<JITDNode>> jitd_root;
    //void update_root(std::shared_ptr<JITDNode> &newRoot){ atomic_store(&root, newRoot); }
};


