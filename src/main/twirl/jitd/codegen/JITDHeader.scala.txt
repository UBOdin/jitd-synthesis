@import jitd.codegen._
@import jitd.spec._
@(ctx:Render)

///////////////////// Headers ///////////////////// 

#include <iostream>
#include <vector>
#include <memory>
#include <algorithm>
#include <ios>

@for(include <- ctx.definition.includes) { 
#include "@include"
}

@if(ctx.debug){
  #define JITD_DEBUG(cmd) std::cerr << cmd;
} else {
  #define JITD_DEBUG(cmd)
}

///////////////////// Structures ///////////////////// 

@ctx.structTypedefs

///////////////////// Base Node Meta ///////////////////// 

typedef enum { 
  @for(node <- ctx.definition.nodes) {
    @node.enumName, 
  }
} JITDNodeType;

class JITDNode {
  public: 
  JITDNode(JITDNodeType type) : type(type) {}

  virtual void printDebug(const std::string &prefix) = 0;
  void printDebug(){ this-> printDebug(std::string("  ")); }

  JITDNodeType type;
  std::shared_ptr<JITDNode> *parent;
};

///////////////////// Node Type Definitions ///////////////////// 

@for(node <- ctx.definition.nodes){
class @{node.renderName} : public JITDNode { 
  public:
  @{node.renderName}( @{ node.fields.map { ctx.fieldDefn(_) }.mkString(", " )} ) : 
    JITDNode(@{node.enumName})
    @for(field <- node.fields){,
      @{field.name}(@{field.name})
    }
  {}

  virtual void printDebug(const std::string &prefix){ 
    std::cout << prefix << "@{node.name}[ "
      @{ node.fields.filter { _.t != TNode() }.map { f => "<< " + ctx.printableValue("this->"+f.name, f.t) }.mkString(" << \", \"") };
      @{  val children = node.fields.filter { _.t == TNode() }
          if(children.size > 0){
            "std::cout << std::endl;\n"+children.map { f => "this->"+f.name+"->printDebug(prefix+string(\"  \"));\n"}
            "std::cout << prefix;"
          } else { "" }
      } 
      std::cout << " ]" << std::endl;
  }

  public: @for(field <- node.fields){ 
    @{ctx.fieldDefn(field)}; 
  }
};
}

///////////////////// Transform Definitions ///////////////////// 

@for(transform <- ctx.definition.transforms){
  void @{transform.name}(std::shared_ptr<JITDNode> &target);
}

///////////////////// JITD Definition ///////////////////// 

class JITD {
  
  public:
    JITD(JITDNode *root) : root(root) {}
    JITD(std::shared_ptr<JITDNode> root) : root(root) {}

    @for( accessor <- ctx.definition.accessors ) {
      @{RenderAccessor.declaration( accessor, ctx, root = true )} {
        return @RenderAccessor.renderCall( accessor, ctx, "root" );
      }
    }

    @for( mutator <- ctx.definition.mutators ) {
      @{RenderMutator.declaration( mutator, ctx )};
    }

    void printDebug() {
      this->root->printDebug();
    }

  private:
    @for( accessor <- ctx.definition.accessors ) {
      @{RenderAccessor.declaration( accessor, ctx )};
    }

    std::shared_ptr<JITDNode> root;

};


///////////////////// JITD Constructors ///////////////////// 

std::shared_ptr<JITD> assemble_jitd(std::istream &in);