
FUNCTION PUSHDOWN(target_cog : cog) {
  match target_cog with 
    | :CONCAT(:TREE(sep, bt_lhs, bt_rhs), :ARRAY(data)) ->
      let cracked := SPLIT(sep, data) in
        rewrite target_cog as
          TREE(sep, 
            CONCAT(bt_lhs, ARRAY(cracked['LHS'])),
            CONCAT(bt_rhs, ARRAY(cracked['RHS']))
          )
  else {}
}

FUNCTION CRACK_OR_SORT(target_cog : cog, threshold : int) { 
  match target_cog with
    | :ARRAY(data) -> {
      if SIZEOF(data) > threshold then
        let cracked := SPLIT(data[0], data) in
          rewrite target_cog as cracked
      else
        rewrite target_cog as
          SORTED(SORT(data))
    }
  else {}
}


POLICY { 
  ON BEFORE_ITERATOR(target_cog) { 
    PUSHDOWN(target_cog);
    CRACK_OR_SORT(target_cog, 3);
  }
}